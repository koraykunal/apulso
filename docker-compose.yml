services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: apulso_postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${DB_NAME:-apulso_production}
      POSTGRES_USER: ${DB_USER:-apulso_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-apulso_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - apulso_network

  # Redis for Celery
  redis:
    image: redis:7-alpine
    container_name: apulso_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - apulso_network

  # Django Application
  web:
    build: .
    container_name: apulso_backend
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn --bind 0.0.0.0:8000 --workers 4 --timeout 120 apulso_backend.wsgi:application"
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8000:8000"
    env_file:
      - .env.production
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - apulso_network
    restart: unless-stopped

  # Celery Worker
  celery_worker:
    build: .
    container_name: apulso_celery_worker
    command: celery -A apulso_backend worker --loglevel=info
    volumes:
      - .:/app
      - media_volume:/app/media
    env_file:
      - .env.production
    depends_on:
      - db
      - redis
      - web
    networks:
      - apulso_network
    restart: unless-stopped

  # Celery Beat (for scheduled tasks)
  celery_beat:
    build: .
    container_name: apulso_celery_beat
    command: celery -A apulso_backend beat --loglevel=info
    volumes:
      - .:/app
    env_file:
      - .env.production
    depends_on:
      - db
      - redis
      - web
    networks:
      - apulso_network
    restart: unless-stopped

  # Nginx (Optional - for serving static files and reverse proxy)
  nginx:
    image: nginx:alpine
    container_name: apulso_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - static_volume:/app/staticfiles:ro
      - media_volume:/app/media:ro
    depends_on:
      - web
    networks:
      - apulso_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:

networks:
  apulso_network:
    driver: bridge
